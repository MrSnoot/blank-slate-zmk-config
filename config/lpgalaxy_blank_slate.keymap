/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define ADJ_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };

    combos {
        compatible = "zmk,combos";
        // Left side
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
			layers = <0>
            bindings = <&kp ESC>;
        };
        combo_dot {
            timeout-ms = <50>;
            key-positions = <14 15>;
			layers = <0>
            bindings = <&kp DOT>;
        };
        combo_comma {
            timeout-ms = <50>;
            key-positions = <13 14>;
			layers = <0>
            bindings = <&kp COMMA>;
        };
        combo_dash {
            timeout-ms = <50>;
            key-positions = <12 13>;
			layers = <0>
            bindings = <&kp SLASH>;
        };
        combo_squot {
            timeout-ms = <50>;
            key-positions = <2 3>;
			layers = <0>
            bindings = <&kp RS(NUHS)>;
        };
        combo_dquot {
            timeout-ms = <50>;
            key-positions = <26 27>;
			layers = <0>
            bindings = <&kp LS(N2)>;
        };
        combo_star {
            timeout-ms = <50>;
            key-positions = <14 27>;
			layers = <0>
            bindings = <&kp RS(RBKT)>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <25 26>;
			layers = <0>
            bindings = <&kp NUHS>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <1 2>;
			layers = <0>
            bindings = <&kp LS(N0)>;
        };
        combo_percent {
            timeout-ms = <50>;
            key-positions = <15 26>;
			layers = <0>
            bindings = <&kp LS(N5)>;
        };
        combo_slash {
            timeout-ms = <50>;
            key-positions = <14 25>;
			layers = <0>
            bindings = <&kp LS(N7)>;
        };
        combo_backslash {
            timeout-ms = <50>;
            key-positions = <13 26>;
			layers = <0>
            bindings = <&kp RA(MINUS)>;
        };
        // Right side
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <20 21>;
			layers = <0>
            bindings = <&kp BSPC>;
        };
        combo_bspc_word {
            timeout-ms = <50>;
            key-positions = <20 21 22>;
			layers = <0>
            bindings = <&kp LC(BSPC)>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <22 23>;
			layers = <0>
            bindings = <&kp DEL>;
        };
        combo_del_word {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
			layers = <0>
            bindings = <&kp LC(DEL)>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <8 9>;
			layers = <0>
            bindings = <&kp LC(C)>;
        }; 
        combo_paste {
            timeout-ms = <50>;
            key-positions = <9 10>;
			layers = <0>
            bindings = <&kp LC(V)>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <10 11>;
			layers = <0>
            bindings = <&kp LC(X)>;
        };
        // combos copy all, copy word, copy line
        combo_alt_f4 {
            timeout-ms = <50>;
            key-positions = <19 31>;
			layers = <0>
            bindings = <&kp LA(F4)>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <21 32>;
			layers = <0>
            bindings = <&kp TAB>;
        };
        combo_vdpr {
            timeout-ms = <50>;
            key-positions = <9 20>;
			layers = <0>
            bindings = <&kp LG(LC(LEFT))>;
        };
        combo_vdnx {
            timeout-ms = <50>;
            key-positions = <8 21>;
			layers = <0>
            bindings = <&kp LG(LC(RIGHT))>;
        };
        // combos task previous, task next
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L SYM_L>;
	    then-layer = <ADJ_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp Q       &kp Y       &kp O       &kp P      &kp Z      &none      &none      &kp W      &kp C      &kp M       &kp V      &kp X
 &mt LSHFT H &mt LALT A  &mt LCTRL E &kp I      &kp K      &none      &none      &kp G      &kp T      &mt LCTRL N &mt LALT S &mt RSHFT R
 &kp J       &kp SEMI    &kp QUOT    &kp U      &kp LBKT   &none      &none      &kp B      &kp D      &kp L       &kp F      &mt LGUI MINUS 
 &none       &none       &none       &mo NUM_L  &lt NAV_L SPACE       &lt NAV_L ENTER       &sl SYM_L  &none       &none      &none
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR &none      &none      &none      &none      &none      &none     &none      &kp HOME   &kp UP     &kp END    &kp PG_UP
&kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &trans     &none      &none     &none      &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN
&bt BT(0)  &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4)  &none      &none     &none      &none      &none      &none      &none
&trans     &trans     &trans     &trans     &trans                          &trans     &trans     &trans     &trans     &trans
            >;
        };

        num_func_layer {
            label = "Num_Func";
            bindings = <
&kp F1       &kp F2      &kp F3       &kp F4      &kp F5     &none      &none    &kp LS(N7)   &kp N7      &kp N8       &kp N9      &kp SLASH
&mt LSHFT F6 &mt LALT F7 &mt LCTRL F8 &mt LGUI F9 &kp F10    &none      &none    &kp LS(RBKT) &mt LGUI N4 &mt LCTRL N5 &mt LALT N6 &mt RSHFT RBKT
&kp F11      &kp F12     &none        &none       &none      &none      &none    &kp COMMA    &kp N1      &kp N2       &kp N3      &kp DOT
&trans       &trans      &trans       &trans      &trans                         &kp N0       &trans      &trans       &trans      &trans
            >;
        };

        symbol_layer {
            label = "Symbol";
            bindings = <
&kp LS(N1)    &kp LS(GRAVE) &kp LS(N3) &kp LS(N4) &kp LS(N6)   &none     &none     &none      &kp LC(LS(LA(L))) &kp LC(LS(LA(B))) &kp EQUAL    &kp LS(EQUAL)
&kp LS(MINUS) &kp RA(N7)    &kp RA(N0) &kp LS(N8) &kp LS(N9)   &none     &none     &none      &kp RA(NUBS)      &kp GRAVE         &kp RA(RBKT) &kp PSCRN
&none         &kp RA(N8)    &kp RA(N9) &kp NUBS   &kp LS(NUBS) &none     &none     &none      &none             &none             &none        &none
&trans        &trans        &trans     &trans     &trans                           &trans     &trans            &trans            &trans       &trans
            >;
        };

        adjust_layer {
            label = "Adjust";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &kp KP_NLCK &none      &none      &bootloader
&none      &none      &none      &none      &none      &none      &none      &none      &kp CLCK    &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &kp SLCK    &none      &none      &none
&trans     &trans     &trans     &trans     &trans                           &trans     &trans      &trans     &trans     &trans
            >;
        };
    };
};

