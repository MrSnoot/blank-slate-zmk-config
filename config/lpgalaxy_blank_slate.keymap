/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define TBLE_DUAL_2U 1

#define NAV_L 1
#define NUM_L 2
#define SYM_L 3
#define ADJ_L 4

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

#define BT(n) BT_SEL n

/ {
    chosen {
       zmk,matrix_transform =
#ifdef TBLE_DUAL_2U
                       &dual_2u_transform;
#elif defined(TBLE_MIT)
                       &mit_transform;
#else
                       &ortho_transform;
#endif
    };

    macros {
      ZMK_MACRO(thumbs_up,
		wait-ms = <1>;
		tap-ms = <5>;
                bindings = <&kp PLUS &kp COLON &kp PLUS &kp N1 &kp COLON &kp RET>;
		)
    };

// Conditional layer only when we have less thumb keys
#ifdef TBLE_DUAL_2U
    cond_layers {
        compatible = "zmk,conditional-layers";
	tri {
	    if-layers = <NUM_L SYM_L>;
	    then-layer = <ADJ_L>;
        };
    };
#endif

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp Q      &kp Y      &kp O      &kp P      &kp Z      &none      &none      &kp W      &kp C      &kp M      &kp V      &kp X
 &kp H      &kp A      &kp E      &kp I      &kp K      &none      &none      &kp G      &kp T      &kp N      &kp S      &kp R
 &kp J      &kp SEMI   &kp QUOT   &kp U      &kp LBKT   &none      &none      &kp B      &kp D      &kp L      &kp F      &kp MINUS
 &none      &none      &none      &mo NUM_L  &lt NAV_L SPACE       &lt NAV_L ENTER       &sl SYM_L  &none      &none      &none
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR &none      &none      &none      &none      &none      &none     &none      &kp HOME   &kp UP     &kp END    &kp PG_UP
&kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &trans     &none      &none     &none      &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN
&bt BT(0)  &bt BT(1M)  &bt BT(2)  &bt BT(3)  &bt BT(4)  &none      &none     &none      &none      &none      &none      &none
&trans     &trans     &trans     &trans     &trans                          &trans     &trans     &trans     &trans     &trans
            >;
        };

        num_func_layer {
            label = "Num_Func";
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5     &none      &none    &kp SLASH  &kp N7     &kp N8     &kp N9     &kp MINUS
&kp F6     &kp F7     &kp F8     &kp F9     &kp F10    &none      &none    &kp ASTRK  &kp N4     &kp N5     &kp N6     &kp PLUS
&kp F11    &kp F12    &none      &none      &none      &none      &none    &kp COMMA  &kp N1     &kp N2     &kp N3     &kp DOT
&trans     &trans     &trans     &trans     &trans                         &kp N0     &trans     &trans     &trans     &trans
            >;
        };

        symbol_layer {
            label = "Symbol";
            bindings = <
&kp LS(N1)    &kp LS(GRAVE) &kp LS(N3) &kp DLLR   &kp AMPS     &none     &none     &none      &trans     &trans     &kp EQUAL  &kp LS(EQUAL)
&kp LS(MINUS) &kp RA(N7)    &kp RA(N0) &kp LS(N8) &kp LS(N9)   &none     &none     &none      &kp PIPE   &kp GRAVE  &kp TILDE  &kp PSCRN
&trans        &kp RA(N8)    &kp RA(N9) &kp NUBS   &kp LS(NUBS) &none     &none     &none      &none      &none      &none      &none
&trans        &trans        &trans     &trans     &trans                           &trans     &trans     &trans     &trans     &trans
            >;
        };

        adjust_layer {
            label = "Adjust";
            bindings = <
&none      &none      &none      &none      &none      &none      &none      &none      &kp KP_NLCK &none      &none      &bootloader
&none      &none      &none      &none      &none      &none      &none      &none      &kp CLCK    &none      &none      &none
&none      &none      &none      &none      &none      &none      &none      &none      &kp SLCK    &none      &none      &none
&trans     &trans     &trans     &trans     &trans                           &trans     &trans      &trans     &trans     &trans
            >;
        };
    };
};

