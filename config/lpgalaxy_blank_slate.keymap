 /*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/num_word.dtsi>

#define TBLE_DUAL_2U 1
#define BT(n) BT_SEL n

#define OPY_L 0
#define NAV_L 1
#define MS_L  2
#define NUM_L 3
#define SYM_L 4
#define ADJ_L 5

#define _______ &trans
#define XXXXXXX &none

#define OSL_NUM &sl NUM_L
#define NAV_SPC &lt NAV_L SPACE
#define MS_ENT  &lt MS_L ENTER
#define OSL_SYM &sl SYM_L

#define HRM_O_H &bhm LSHFT H
#define HRM_O_A &bhm LALT A
#define HRM_O_E &bhm LCTRL E
#define HRM_O_I &kp I
#define HRM_O_T &kp T
#define HRM_O_N &bhm LCTRL N
#define HRM_O_S &bhm LALT S
#define HRM_O_R &bhm RSHFT R

#define NUM_F6 &bhm LSHFT F6
#define NUM_F7 &bhm LALT F7
#define NUM_F8 &bhm LCTRL F8
#define NUM_F9 &bhm LGUI F9
#define NUM_4 &bhm LGUI N4
#define NUM_5 &bhm LCTRL N5
#define NUM_6 &bhm LALT N6
#define NUM_PLS &bhm RSHFT RBKT

#define NW_CNCL &kp K_CANCEL

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
&lt { quick_tap_ms = <200>; };

&caps_word {
  // do continue on: Backspace - ä ö ü
  continue-list = <BSPC SLASH SEMI QUOT LBKT>;
};

&num_word {
   // do continue on: Backspace delete . , * + - =
  continue-list = <BSPC DEL DOT COMMA LS(RBKT) RBKT SLASH LS(N0)>;
};

/ {
    chosen {
       zmk,matrix_transform = &dual_2u_transform;
    };

    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            // hold-trigger-key-positions = <KEYS_R THUMBS>;
            // hold-trigger-on-release;   
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        cp_all: copy_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp LC(A) &kp LC(C)>;
        };
        cp_line: copy_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C)>;
        };
        cp_word: copy_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp LC(LEFT) &kp LC(LS(RIGHT)) &kp LC(C)>;
        };
    	s_ln_f5: select_line_f5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp HOME &kp LS(END) &kp F5>;
        };
        f2_cpln: f2_copy_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&kp F2 &kp HOME &kp LS(END) &kp LC(C) &kp ESC>;
        };
        im1_ins: imed_insert {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings 
                = <&kp LC(A) &kp LC(V)>
                , <&macro_wait_time 500>
                , <&kp LA(F4)>
                , <&macro_wait_time 500>
                , <&kp ENTER>;
        };
        dbl_clk: mouse_double_click {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <30>;
            tap-ms = <40>;
            bindings = <&mkp MB1 &mkp MB1>;
        };
        tb_scr: trackball_toggle_scroll {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <25>;
            tap-ms = <10>;
            bindings 
                = <&kp SLCK>
                , <&kp SLCK>;
        };
        tb_dpi: trackball_change_dpi {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <25>;
            tap-ms = <10>;
            bindings 
                = <&kp KP_NLCK>
                , <&kp KP_NLCK>;
        };
        tb_rst: trackball_reset {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <25>;
            tap-ms = <10>;
            bindings 
                = <&kp CLCK>
                , <&kp CLCK>;
        };
    };


    /*                KEY POSITIONS
    
      ╭─────────────────────────────────────────────────╮
      │  0   1   2   3   4 │  5  6 │  7   8   9  10  11 │
      │ 12  13  14  15  16 │ 17 18 │ 19  20  21  22  23 │
      │ 24  25  26  27  28 │ 29 30 │ 31  32  33  34  35 │
      │ 36  37  38  39 │  40   │   41  │ 42  43  44  45 │
      ╰─────────────────────────────────────────────────╯
    */

    combos {
        compatible = "zmk,combos";
        // Both sides
        combo_caps_word {
            timeout-ms = <50>;
            key-positions = <12 23>;
            layers = <OPY_L>;
            bindings = <&caps_word>;
        };
        // Left side
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            layers = <OPY_L>;
            bindings = <&kp ESC>;
        };
        combo_dot {
            timeout-ms = <50>;
            key-positions = <14 15>;
             layers = <OPY_L>;
            bindings = <&kp DOT>;
        };
        combo_comma {
            timeout-ms = <50>;
            key-positions = <13 14>;
             layers = <OPY_L>;
            bindings = <&kp COMMA>;
        };
        combo_dash {
            timeout-ms = <50>;
            key-positions = <12 13>;
             layers = <OPY_L>;
            bindings = <&kp SLASH>;
        };
        combo_squot {
            timeout-ms = <50>;
            key-positions = <2 3>;
             layers = <OPY_L>;
            bindings = <&kp RS(NUHS)>;
        };
        combo_dquot {
            timeout-ms = <50>;
            key-positions = <26 27>;
             layers = <OPY_L>;
            bindings = <&kp LS(N2)>;
        };
        combo_star {
            timeout-ms = <50>;
            key-positions = <14 27>;
             layers = <OPY_L>;
            bindings = <&kp RS(RBKT)>;
        };
        combo_hash {
            timeout-ms = <50>;
            key-positions = <25 26>;
             layers = <OPY_L>;
            bindings = <&kp NUHS>;
        };
        combo_equal {
            timeout-ms = <50>;
            key-positions = <1 2>;
             layers = <OPY_L NUM_L>;
            bindings = <&kp LS(N0)>;
        };
        combo_percent {
            timeout-ms = <50>;
            key-positions = <15 26>;
             layers = <OPY_L>;
            bindings = <&kp LS(N5)>;
        };
        combo_slash {
            timeout-ms = <50>;
            key-positions = <14 25>;
             layers = <OPY_L>;
            bindings = <&kp LS(N7)>;
        };
        combo_backslash {
            timeout-ms = <50>;
            key-positions = <13 26>;
             layers = <OPY_L>;
            bindings = <&kp RA(MINUS)>;
        };
        // Right side
        combo_bspc {
            timeout-ms = <50>;
            key-positions = <20 21>;
             layers = <OPY_L NUM_L>;
            bindings = <&kp BSPC>;
        };
        combo_bspc_word {
            timeout-ms = <50>;
            key-positions = <20 21 22>;
            layers = <OPY_L NUM_L>;
            bindings = <&kp LC(BSPC)>;
        };
        combo_del {
            timeout-ms = <50>;
            key-positions = <22 23>;
            layers = <OPY_L NUM_L>;
            bindings = <&kp DEL>;
        };
        combo_del_word {
            timeout-ms = <50>;
            key-positions = <21 22 23>;
            layers = <OPY_L NUM_L>;
            bindings = <&kp LC(DEL)>;
        };
        combo_copy {
            timeout-ms = <50>;
            key-positions = <8 9>;
             layers = <OPY_L>;
            bindings = <&kp LC(C)>;
        }; 
        combo_paste {
            timeout-ms = <50>;
            key-positions = <9 10>;
             layers = <OPY_L>;
            bindings = <&kp LC(V)>;
        };
        combo_cut {
            timeout-ms = <50>;
            key-positions = <10 11>;
             layers = <OPY_L>;
            bindings = <&kp LC(X)>;
        };
        combo_copy_all {
            timeout-ms = <50>;
            key-positions = <32 33>;
            layers = <OPY_L>;
            bindings = <&cp_all>;
        };
        combo_copy_line {
            timeout-ms = <50>;
            key-positions = <33 34>;
            layers = <OPY_L>;
            bindings = <&cp_line>;
        };
        combo_copy_word {
            timeout-ms = <50>;
            key-positions = <34 35>;
            layers = <OPY_L>;
            bindings = <&cp_word>;
        };
        combo_alt_f4 {
            timeout-ms = <50>;
            key-positions = <19 31>;
            layers = <OPY_L>;
            bindings = <&kp LA(F4)>;
        };
        combo_tab {
            timeout-ms = <50>;
            key-positions = <21 32>;
            layers = <OPY_L>;
            bindings = <&kp TAB>;
        };
        combo_vdpr {
            timeout-ms = <50>;
            key-positions = <9 20>;
            layers = <OPY_L>;
            bindings = <&kp LG(LC(LEFT))>;
        };
        combo_vdnx {
            timeout-ms = <50>;
            key-positions = <8 21>;
            layers = <OPY_L>;
            bindings = <&kp LG(LC(RIGHT))>;
        };
        combo_mouse_dbl_click {
            timeout-ms = <50>;
            key-positions = <20 21>;
            layers = <MS_L>;
            bindings = <&dbl_clk>;
        };
        combo_num_word {
            timeout-ms = <50>;
            key-positions = <9 22>;
            layers = <OPY_L NUM_L>;
            bindings = <&num_word NUM_L>;
        };
        // combos task previous, task next hinzufügen
    };

    // Conditional layer only when we have less thumb keys
    cond_layers {
        compatible = "zmk,conditional-layers";
    	tri {
    	    if-layers = <NUM_L SYM_L>;
    	    then-layer = <ADJ_L>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
 &kp Q      &kp Y      &kp O      &kp P      &kp Z      XXXXXXX    XXXXXXX    &kp W      &kp C      &kp M      &kp V      &kp X
 HRM_O_H    HRM_O_A    HRM_O_E    HRM_O_I    &kp K      XXXXXXX    XXXXXXX    &kp G      HRM_O_T    HRM_O_N    HRM_O_S    HRM_O_R
 &kp J      &kp SEMI   &kp QUOT   &kp U      &kp LBKT   XXXXXXX    XXXXXXX    &kp B      &kp D      &kp L      &kp F      &bhm LGUI MINUS 
 XXXXXXX    XXXXXXX    XXXXXXX    OSL_NUM    NAV_SPC                          MS_ENT     OSL_SYM    XXXXXXX    XXXXXXX    XXXXXXX
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
&bt BT_CLR XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    &kp HOME   &kp UP     &kp END    &kp PG_UP
&kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  _______    XXXXXXX    XXXXXXX    XXXXXXX    &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN
&bt BT(0)  &bt BT(1)  &bt BT(2)  &bt BT(3)  &bt BT(4)  XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX
_______    _______    _______    _______    _______                          _______    _______    _______    _______    _______
            >;
        };

        mouse_layer {
            label = "Ms";
            bindings = <
XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX
XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    &tb_dpi    &mkp MB1   &mkp MB2   &kp LCTRL  &kp LSHFT
XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    XXXXXXX    &tb_scr    XXXXXXX    XXXXXXX    XXXXXXX
_______    _______    _______    _______    _______                          _______    _______    _______    _______    _______
            >;
        };

        num_func_layer {
            label = "Num_Func";
            bindings = <
&kp F1     &kp F2     &kp F3     &kp F4     &kp F5     XXXXXXX    XXXXXXX    &kp LS(N7)   &kp N7     &kp N8     &kp N9     &kp SLASH
NUM_F6     NUM_F7     NUM_F8     NUM_F9     &kp F10    XXXXXXX    XXXXXXX    &kp LS(RBKT) NUM_4      NUM_5      NUM_6      NUM_PLS
&kp F11    &kp F12    XXXXXXX    &s_ln_f5   XXXXXXX    XXXXXXX    XXXXXXX    &kp COMMA    &kp N1     &kp N2     &kp N3     &kp DOT
_______    _______    _______    _______    _______                          &kp N0       _______    _______    _______    _______
            >;
        };

        symbol_layer {
            label = "Symbol";
            bindings = <
&kp LS(N1)    &kp LS(GRAVE) &kp LS(N3) &kp LS(N4) &kp LS(N6)   XXXXXXX     XXXXXXX     XXXXXXX     &kp RA(NUBS)      &kp GRAVE         &kp RA(RBKT) XXXXXXX
&kp LS(MINUS) &kp RA(N7)    &kp RA(N0) &kp LS(N8) &kp LS(N9)   XXXXXXX     XXXXXXX     XXXXXXX     &kp LC(LS(LA(L))) &kp LC(LS(LA(B))) &kp EQUAL    &kp LS(EQUAL)
XXXXXXX       &kp RA(N8)    &kp RA(N9) &kp NUBS   &kp LS(NUBS) XXXXXXX     XXXXXXX     XXXXXXX     &f2_cpln          &im1_ins          XXXXXXX      &kp PSCRN
_______       _______       _______    _______    _______                              _______     _______           _______           _______      _______
            >;
        };

        adjust_layer {
            label = "Adjust";
            bindings = <
XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     &kp KP_NLCK XXXXXXX     XXXXXXX     &bootloader
XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     &kp CLCK    XXXXXXX     XXXXXXX     XXXXXXX
XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     XXXXXXX     &kp SLCK    XXXXXXX     XXXXXXX     &tb_rst
_______     _______     _______     _______     _______                             _______     _______     _______     _______     _______
            >;
        };
    };
};

